{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/Main.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from \"../constants\";\n\nclass Main extends Component {\n  constructor() {\n    super();\n\n    this.showNearbySatellite = setting => {\n      this.setState({\n        settings: setting\n      });\n      this.fetchSatellite(setting);\n    };\n\n    this.fetchSatellite = setting => {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude\n      } = setting;\n      const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n      this.setState({\n        isLoadingList: true\n      });\n      axios.get(url).then(response => {\n        console.log(response.data);\n        this.setState({\n          satInfo: response.data,\n          isLoadingList: false\n        });\n      }).catch(error => {\n        console.log(\"err in fetch satellite -> \", error);\n      });\n    };\n\n    this.showMap = selected => {\n      this.setState(preState => ({ ...preState,\n        isLoadingMap: true,\n        satList: [...selected]\n      }));\n    };\n\n    this.state = {\n      satInfo: null,\n      settings: null,\n      isLoadingList: false\n    };\n  }\n\n  render() {\n    const {\n      satInfo\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-side\",\n        children: [/*#__PURE__*/_jsxDEV(SatSetting, {\n          onShow: this.showNearbySatellite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SatelliteList, {\n          satInfo: satInfo,\n          isLoad: this.state.isLoadingList,\n          onShowMap: this.showMap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-side\",\n        children: /*#__PURE__*/_jsxDEV(WorldMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/Main.js"],"names":["React","Component","axios","SatSetting","SatelliteList","WorldMap","NEARBY_SATELLITE","SAT_API_KEY","STARLINK_CATEGORY","Main","constructor","showNearbySatellite","setting","setState","settings","fetchSatellite","latitude","longitude","elevation","altitude","url","isLoadingList","get","then","response","console","log","data","satInfo","catch","error","showMap","selected","preState","isLoadingMap","satList","state","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,EAAwCC,iBAAxC,QAAiE,cAAjE;;AAEA,MAAMC,IAAN,SAAmBR,SAAnB,CAA6B;AACzBS,EAAAA,WAAW,GAAG;AACV;;AADU,SAQdC,mBARc,GAQQC,OAAO,IAAI;AAC7B,WAAKC,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAEF;AADA,OAAd;AAGA,WAAKG,cAAL,CAAoBH,OAApB;AACH,KAba;;AAAA,SAedG,cAfc,GAeGH,OAAO,IAAI;AACxB,YAAM;AAAEI,QAAAA,QAAF;AAAYC,QAAAA,SAAZ;AAAuBC,QAAAA,SAAvB;AAAkCC,QAAAA;AAAlC,UAA+CP,OAArD;AACA,YAAMQ,GAAG,GAAI,QAAOd,gBAAiB,IAAGU,QAAS,IAAGC,SAAU,IAAGC,SAAU,IAAGC,QAAS,IAAGX,iBAAkB,YAAWD,WAAY,EAAnI;AAEA,WAAKM,QAAL,CAAc;AACVQ,QAAAA,aAAa,EAAE;AADL,OAAd;AAIAnB,MAAAA,KAAK,CACAoB,GADL,CACSF,GADT,EAEKG,IAFL,CAEUC,QAAQ,IAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACA,aAAKd,QAAL,CAAc;AACVe,UAAAA,OAAO,EAAEJ,QAAQ,CAACG,IADR;AAEVN,UAAAA,aAAa,EAAE;AAFL,SAAd;AAIH,OARL,EASKQ,KATL,CASWC,KAAK,IAAI;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CI,KAA1C;AACH,OAXL;AAYH,KAnCa;;AAAA,SAqCdC,OArCc,GAqCJC,QAAQ,IAAI;AAClB,WAAKnB,QAAL,CAAcoB,QAAQ,KAAK,EACvB,GAAGA,QADoB;AAEvBC,QAAAA,YAAY,EAAE,IAFS;AAGvBC,QAAAA,OAAO,EAAE,CAAC,GAAGH,QAAJ;AAHc,OAAL,CAAtB;AAKH,KA3Ca;;AAEV,SAAKI,KAAL,GAAa;AACTR,MAAAA,OAAO,EAAE,IADA;AAETd,MAAAA,QAAQ,EAAE,IAFD;AAGTO,MAAAA,aAAa,EAAE;AAHN,KAAb;AAKH;;AAsCDgB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAET,MAAAA;AAAF,QAAc,KAAKQ,KAAzB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,MAAM,EAAE,KAAKzB;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,aAAD;AACI,UAAA,OAAO,EAAEiB,OADb;AAEI,UAAA,MAAM,EAAE,KAAKQ,KAAL,CAAWf,aAFvB;AAGI,UAAA,SAAS,EAAE,KAAKU;AAHpB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH;;AA/DwB;;AAkE7B,eAAetB,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from \"../constants\";\n\nclass Main extends Component {\n    constructor() {\n        super();\n        this.state = {\n            satInfo: null,\n            settings: null,\n            isLoadingList: false\n        };\n    }\n    showNearbySatellite = setting => {\n        this.setState({\n            settings: setting\n        });\n        this.fetchSatellite(setting);\n    };\n\n    fetchSatellite = setting => {\n        const { latitude, longitude, elevation, altitude } = setting;\n        const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n        this.setState({\n            isLoadingList: true\n        });\n\n        axios\n            .get(url)\n            .then(response => {\n                console.log(response.data);\n                this.setState({\n                    satInfo: response.data,\n                    isLoadingList: false\n                });\n            })\n            .catch(error => {\n                console.log(\"err in fetch satellite -> \", error);\n            });\n    };\n\n    showMap = selected => {\n        this.setState(preState => ({\n            ...preState,\n            isLoadingMap: true,\n            satList: [...selected]\n        }));\n    };\n\n    render() {\n        const { satInfo } = this.state;\n        return (\n            <div className=\"main\">\n                <div className=\"left-side\">\n                    <SatSetting onShow={this.showNearbySatellite} />\n                    <SatelliteList\n                        satInfo={satInfo}\n                        isLoad={this.state.isLoadingList}\n                        onShowMap={this.showMap}\n                    />\n                </div>\n                <div className=\"right-side\">\n                    <WorldMap />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}