{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/WorldMap.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.track = data => {\n      // get amount of positions of selected satellite\n      const len = data[0].position.length;\n      const {\n        duration\n      } = this.props.observerData;\n      const {\n        context2\n      } = this.map; // record current time\n\n      let now = new Date();\n      let i = 0; // every 1000ms, draw a dot\n\n      let timer = setInterval(() => {\n        // record current draw time\n        let ct = new Date();\n        let timePassed = i === 0 ? 0 : ct - now;\n        let time = new Date(now.getTime() + 60 * timePassed);\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\";\n        context2.fillText(d3TimeFormat(time), width / 2, 10); // case 1: completed\n\n        if (i >= len) {\n          clearInterval(timer);\n          return;\n        } // case 2: continue\n\n\n        data.forEach(sat => {\n          const {\n            info,\n            positions\n          } = sat;\n          this.drawSat(info, positions[i]);\n        });\n        i += 60;\n      }, 1000);\n    };\n\n    this.drawSat = (sat, pos) => {\n      const {\n        satlongitude,\n        satlatitude\n      } = pos;\n\n      if (!satlongitude || !satlatitude) {\n        return;\n      }\n\n      ;\n      const {\n        satname\n      } = sat; // regular expression: only use number to represent the satellite name\n\n      const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n      const {\n        projection,\n        context2\n      } = this.map;\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = this.color(nameWithNumber);\n      context2.beginPath();\n    };\n\n    this.state = {\n      map: null\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = /*#__PURE__*/React.createRef();\n    this.refTrack = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fetch world map data ', e));\n  }\n\n  generateMap(land) {\n    const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1); // console.log(projection)\n    // map\n\n    const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height); // satellite track\n\n    const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n    let context = canvas.node().getContext(\"2d\");\n    let context2 = canvas2.node().getContext(\"2d\");\n    const graticule = geoGraticule();\n    let path = geoPath().projection(projection).context(context);\n    land.forEach(ele => {\n      // country\n      context.fillStyle = '#B3DDEF';\n      context.strokeStyle = '#000';\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke(); // latitude and longitude (graticule)\n\n      context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke(); // border of the map top and bottom\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.setData !== this.props.setData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60; // speed\n      // generate all satellite urls\n\n      const urls = this.props.satData.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return axios.get(url);\n      });\n      axios.all(urls) //  promise链式调用\n      // es 6.0 it can use async and await.\n      .then(axios.spread((...args) => {\n        console.log(args);\n        return args.map(item => item.data);\n      })).then(res => {\n        console.log(res);\n      }).catch(err => {\n        console.log('err', err.message);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"track\",\n        ref: this.refTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/WorldMap.js"],"names":["React","Component","axios","Spin","feature","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","schemeCategory10","d3Scale","timeFormat","d3TimeFormat","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","constructor","track","data","len","position","length","duration","props","observerData","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","forEach","sat","info","positions","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","xy","color","beginPath","state","scaleOrdinal","refMap","createRef","refTrack","componentDidMount","get","then","res","land","objects","countries","features","generateMap","catch","e","console","log","scale","translate","precision","canvas","current","attr","canvas2","context","node","getContext","graticule","path","ele","strokeStyle","globalAlpha","fill","stroke","lineWidth","outline","componentDidUpdate","prevProps","prevState","snapshot","setData","latitude","longitude","elevation","endTime","urls","satData","satid","url","all","spread","args","item","err","message","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n    WORLD_MAP_URL,\n    SATELLITE_POSITION_URL,\n    SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor(){\n        super();\n        this.state = {\n            map: null\n        }\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fetch world map data ', e))\n    }\n\n    generateMap(land) {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1)\n\n        // console.log(projection)\n        // map\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n\n        // satellite track\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n\n\n        let context = canvas.node().getContext(\"2d\");\n        let context2 = canvas2.node().getContext(\"2d\");\n\n        const graticule = geoGraticule();\n        let path = geoPath().projection(projection).context(context);\n\n        land.forEach( ele => {\n            // country\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            // latitude and longitude (graticule)\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            // border of the map top and bottom\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n\n        })\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context,\n        }\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.setData !== this.props.setData) {\n            const {latitude, longitude, elevation, duration} = this.props.observerData;\n            const endTime = duration * 60; // speed\n\n            // generate all satellite urls\n            const urls = this.props.satData.map( sat => {\n                const { satid } = sat;\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n                return axios.get(url);\n            });\n\n            axios\n                .all(urls)\n                //  promise链式调用\n                // es 6.0 it can use async and await.\n                .then( axios.spread((...args) => {\n                    console.log(args);\n                    return args.map( item => item.data)\n                }))\n                .then( res => {\n                    console.log(res)\n                })\n                .catch( err => {\n                    console.log('err', err.message)\n                })\n\n        }\n\n    }\n\n    track = data => {\n        // get amount of positions of selected satellite\n        const len = data[0].position.length;\n        const { duration } = this.props.observerData;\n        const { context2 } = this.map;\n\n        // record current time\n        let now = new Date();\n        let i = 0;\n\n        // every 1000ms, draw a dot\n        let timer = setInterval(() => {\n            // record current draw time\n            let ct = new Date();\n\n            let timePassed = i === 0 ? 0: ct - now;\n            let time = new Date(now.getTime() + 60 * timePassed);\n\n            context2.clearRect(0, 0, width, height);\n\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            // case 1: completed\n            if (i >= len) {\n                clearInterval(timer);\n                return;\n            }\n\n            // case 2: continue\n            data.forEach( sat => {\n                const { info, positions } = sat;\n                this.drawSat(info, positions[i])\n            });\n\n            i += 60;\n        }, 1000);\n    }\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n        if(!satlongitude || !satlatitude) {\n            return;\n        };\n\n        const { satname} = sat;\n        // regular expression: only use number to represent the satellite name\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n        const { projection, context2} = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        \n\n    }\n\n    render() {\n        return (\n            <div className = \"map-box\">\n                <canvas className = \"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}