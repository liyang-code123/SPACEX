{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liyang/Documents/Developer/Laioffer/spaceX/starlink/src/components/SatelliteList.js\";\nimport React, { Component } from \"react\";\nimport { List, Avatar, Button, Checkbox, Spin } from \"antd\";\nimport satellite from \"../assets/images/satellite.svg\";\n\nclass SatelliteList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selected: []\n    };\n\n    this.onChange = e => {\n      // step1: satellite checked?\n      const {\n        dataInfo,\n        checked\n      } = e.target; // step 2: get selected list\n\n      const {\n        selected\n      } = this.state; // step 3: get new selected list\n\n      const list = this.addOrRemove(dataInfo, checked, selected); // step 4: update selected satellite list\n\n      this.setState({\n        selected: list\n      });\n    };\n\n    this.addOrRemove = (item, status, list) => {\n      // case 1: checked is true;\n      // -> item not in the list -> add it\n      // -> item is in the list -> do nothing\n      // case 2: checked is false\n      // -> item is in the list -> remove it\n      // -> item is not in the list -> do nothing\n      // som can traverse array, if it is in the array, return true; otherwise, return false.\n      const found = list.some(entry => entry.satid === item.satid);\n\n      if (status && !found) {\n        list.push(item); // list =[...list, dataInfo]\n      }\n\n      if (!status && found) {\n        list = list.filter(entry => {\n          return entry.satid !== item.satid;\n        });\n      } // console.log(list)\n\n\n      return list;\n    };\n\n    this.onShowSatMap = () => {\n      const {\n        selected\n      } = this.state;\n      this.props.onShowMap(selected);\n    };\n  }\n\n  render() {\n    const satList = this.props.satInfo ? this.props.satInfo.above : [];\n    const {\n      isLoad\n    } = this.props;\n    const {\n      selected\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sat-list-box\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"sat-list-btn\",\n        size: \"large\",\n        disabled: selected.length === 0,\n        onClick: this.onShowSatMap,\n        children: \"Track on the map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), isLoad ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spin-box\",\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          tip: \"Loading...\",\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(List, {\n        className: \"sat-list\",\n        itemLayout: \"horizontal\",\n        size: \"small\",\n        dataSource: satList,\n        renderItem: item => /*#__PURE__*/_jsxDEV(List.Item, {\n          actions: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            dataInfo: item,\n            onChange: this.onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 37\n          }, this)],\n          children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              size: 50,\n              src: satellite\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 45\n            }, this),\n            title: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.satname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 44\n            }, this),\n            description: `Launch Date: ${item.launchDate}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SatelliteList;","map":{"version":3,"sources":["/Users/liyang/Documents/Developer/Laioffer/spaceX/starlink/src/components/SatelliteList.js"],"names":["React","Component","List","Avatar","Button","Checkbox","Spin","SatelliteList","state","selected","onChange","e","dataInfo","checked","target","list","addOrRemove","setState","item","status","found","some","entry","satid","push","filter","onShowSatMap","props","onShowMap","render","satList","satInfo","above","isLoad","length","satellite","satname","launchDate"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { List, Avatar, Button, Checkbox, Spin } from \"antd\";\nimport satellite from \"../assets/images/satellite.svg\";\n\nclass SatelliteList extends Component {\n    state = {\n        selected: []\n    }\n\n    onChange = e => {\n        // step1: satellite checked?\n        const { dataInfo, checked } = e.target;\n\n        // step 2: get selected list\n        const { selected } = this.state;\n\n        // step 3: get new selected list\n        const list = this.addOrRemove(dataInfo, checked, selected);\n\n        // step 4: update selected satellite list\n        this.setState({\n            selected: list\n        });\n    };\n\n    addOrRemove = (item, status, list) => {\n        // case 1: checked is true;\n        // -> item not in the list -> add it\n        // -> item is in the list -> do nothing\n\n        // case 2: checked is false\n        // -> item is in the list -> remove it\n        // -> item is not in the list -> do nothing\n\n        // som can traverse array, if it is in the array, return true; otherwise, return false.\n        const found = list.some(entry => entry.satid === item.satid);\n        if (status && !found) {\n            list.push(item);\n            // list =[...list, dataInfo]\n        }\n\n        if (!status && found) {\n            list = list.filter(entry => {\n                return entry.satid !== item.satid;\n            });\n        }\n        // console.log(list)\n        return list;\n    };\n\n    // onShowSatMap = () => {\n    //     this.props.onShowMap(this.state.selected);\n    // };\n\n    onShowSatMap = () => {\n        const { selected } = this.state;\n        this.props.onShowMap(selected);\n    }\n\n    render() {\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\n        const { isLoad } = this.props;\n        const { selected } = this.state;\n\n        return (\n            <div className=\"sat-list-box\">\n                <Button\n                    className=\"sat-list-btn\"\n                    size=\"large\"\n                    disabled={selected.length === 0}\n                    onClick={this.onShowSatMap}\n                >\n                    Track on the map\n                </Button>\n                <hr />\n\n                {isLoad ? (\n                    <div className=\"spin-box\">\n                        <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : (\n                    <List\n                        className=\"sat-list\"\n                        itemLayout=\"horizontal\"\n                        size=\"small\"\n                        dataSource={satList}\n                        renderItem={item => (\n                            <List.Item\n                                actions={[\n                                    <Checkbox dataInfo={item} onChange={this.onChange} />\n                                ]}\n                            >\n                                <List.Item.Meta\n                                    avatar={<Avatar size={50} src={satellite} />}\n                                    title={<p>{item.satname}</p>}\n                                    description={`Launch Date: ${item.launchDate}`}\n                                />\n                            </List.Item>\n                        )}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default SatelliteList;\n"]},"metadata":{},"sourceType":"module"}