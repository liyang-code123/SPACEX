{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/WorldMap.js\";\nimport React, { Component } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { WORLD_MAP_URL } from \"../constants\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.generateMap = land => {\n      const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n      console.log(projection);\n    };\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      // console.log(res);\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objcts.countries); // console.log(land)\n    }).catch(err => {\n      console.log('Error in fetch world map data: ', err.message);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), \"ref=\", this.refMap]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/WorldMap.js"],"names":["React","Component","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","WORLD_MAP_URL","width","height","WorldMap","constructor","generateMap","land","projection","scale","translate","precision","console","log","componentDidMount","get","then","res","data","objcts","countries","catch","err","message","render","refMap"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,YAAT,EAAuBC,OAAvB,QAAsC,QAAtC;AACA,SAASC,MAAM,IAAIC,QAAnB,QAAmC,cAAnC;AAEA,SAASC,aAAT,QAA6B,cAA7B;AAEA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf;;AAEA,MAAMC,QAAN,SAAuBX,SAAvB,CAAiC;AAC7BY,EAAAA,WAAW,GAAG;AACV;;AADU,SAgBdC,WAhBc,GAgBAC,IAAI,IAAI;AAClB,YAAMC,UAAU,GAAGZ,cAAc,GAC5Ba,KADc,CACR,GADQ,EAEdC,SAFc,CAEJ,CAACR,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CAFI,EAGdQ,SAHc,CAGJ,EAHI,CAAnB;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACH,KAtBa;AAEb;;AACDM,EAAAA,iBAAiB,GAAG;AAChBnB,IAAAA,KAAK,CAACoB,GAAN,CAAWd,aAAX,EACKe,IADL,CACWC,GAAG,IAAI;AACV;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAWD,GAAjB;AACA,YAAMV,IAAI,GAAGb,OAAO,CAACwB,IAAD,EAAOA,IAAI,CAACC,MAAL,CAAYC,SAAnB,CAApB,CAHU,CAIV;AACH,KANL,EAOKC,KAPL,CAOYC,GAAG,IAAI;AACXV,MAAAA,OAAO,CAACC,GAAR,CAAa,iCAAb,EAAgDS,GAAG,CAACC,OAApD;AACH,KATL;AAUH;;AAUDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAG,SAAjB;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAG;AAApB;AAAA;AAAA;AAAA;AAAA,cADJ,UAEa,KAAKC,MAFlB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAhC4B;;AAmCjC,eAAerB,QAAf","sourcesContent":["import React, {Component} from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\n\nimport { WORLD_MAP_URL} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor() {\n        super();\n    }\n    componentDidMount() {\n        axios.get( WORLD_MAP_URL)\n            .then( res => {\n                // console.log(res);\n                const { data } = res;\n                const land = feature(data, data.objcts.countries)\n                // console.log(land)\n            })\n            .catch( err => {\n                console.log( 'Error in fetch world map data: ', err.message)\n            })\n    }\n\n    generateMap = land => {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1)\n        console.log(projection)\n    }\n\n    render() {\n        return (\n            <div className = \"map-box\">\n                <canvas className = \"map\"></canvas>\n                    ref={this.refMap}\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}