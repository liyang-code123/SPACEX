{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/WorldMap.js\";\nimport React, { Component } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { WORLD_MAP_URL } from \"../constants\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.generateMap = land => {\n      const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n      const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n      let context = canvas.node().getContext(\"2d\");\n      const graticule = geoGraticule();\n      let path = geoPath().projection(projection).context(context);\n      land.forEach(ele => {\n        // country\n        context.fillStyle = '#B3DDEF';\n        context.strokeStyle = '#000';\n        context.globalAlpha = 0.7;\n        context.beginPath();\n        path(ele);\n        context.fill();\n        context.stroke(); // latitude and longitude (graticule)\n\n        context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n        context.beginPath();\n        path(graticule());\n        context.lineWidth = 0.1;\n        context.stroke(); // border of the map top and bottom\n\n        context.beginPath();\n        context.lineWidth = 0.5;\n        path(graticule.outline());\n        context.stroke();\n      });\n    };\n\n    this.state = {\n      map: null\n    };\n    this.refMap = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      // console.log(res);\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objcts.countries); // console.log(land)\n    }).catch(err => {\n      console.log('Error in fetch world map data: ', err.message);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), \"ref=\", this.refMap]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/WorldMap.js"],"names":["React","Component","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","WORLD_MAP_URL","width","height","WorldMap","constructor","generateMap","land","projection","scale","translate","precision","canvas","refMap","current","attr","context","node","getContext","graticule","path","forEach","ele","fillStyle","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","state","map","createRef","componentDidMount","get","then","res","data","objcts","countries","catch","err","console","log","message","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\n\nimport { WORLD_MAP_URL} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor() {\n        super();\n        this.state = {\n            map: null\n        }\n        this.refMap = React.createRef();\n    }\n    componentDidMount() {\n        axios.get( WORLD_MAP_URL)\n            .then( res => {\n                // console.log(res);\n                const { data } = res;\n                const land = feature(data, data.objcts.countries)\n                // console.log(land)\n            })\n            .catch( err => {\n                console.log( 'Error in fetch world map data: ', err.message)\n            })\n    }\n\n    generateMap = land => {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1)\n\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n\n        let context = canvas.node().getContext(\"2d\");\n\n        const graticule = geoGraticule();\n        let path = geoPath().projection(projection).context(context);\n\n        land.forEach( ele => {\n            // country\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            // latitude and longitude (graticule)\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            // border of the map top and bottom\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n\n        })\n\n    }\n\n    render() {\n        return (\n            <div className = \"map-box\">\n                <canvas className = \"map\"></canvas>\n                    ref={this.refMap}\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}