{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/WorldMap.js\";\nimport React, { Component } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.track = data => {\n      // get amount of positions of selected satellite\n      const len = data[0].position.length;\n      const {\n        duration\n      } = this.props.observerData;\n      const {\n        context2\n      } = this.map; // record current time\n\n      let now = new Date();\n      let i = 0; // every 1000ms, draw a dot\n\n      let timer = setInterval(() => {\n        // record current draw time\n        let ct = new Date();\n        let timePassed = i === 0 ? 0 : ct - now;\n        let time = new Date(now.getTime() + 60 * timePassed);\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px san-serif\";\n      }, 1000);\n    };\n\n    this.state = {\n      map: null\n    };\n    this.map = null;\n    this.refMap = /*#__PURE__*/React.createRef();\n    this.refTrack = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fecth world map data ', e));\n  }\n\n  generateMap(land) {\n    const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1); // console.log(projection)\n    // map\n\n    const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height); // satellite track\n\n    const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n    let context = canvas.node().getContext(\"2d\");\n    let context2 = canvas2.node().getContext(\"2d\");\n    const graticule = geoGraticule();\n    let path = geoPath().projection(projection).context(context);\n    land.forEach(ele => {\n      // country\n      context.fillStyle = '#B3DDEF';\n      context.strokeStyle = '#000';\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke(); // latitude and longitude (graticule)\n\n      context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke(); // border of the map top and bottom\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.setData !== this.props.setData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60; // speed\n      // generate all satellite urls\n\n      const urls = this.props.satData.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return axios.get(url);\n      });\n      axios.all(urls) //  promise链式调用\n      // es 6.0 it can use async and await.\n      .then(axios.spread((...args) => {\n        console.log(args);\n        return args.map(item => item.data);\n      })).then(res => {\n        console.log(res);\n      }).catch(err => {\n        console.log('err', err.message);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"track\",\n        ref: this.refTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/liyang/Developer/Laioffer/spaceX/starlink/src/components/WorldMap.js"],"names":["React","Component","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","constructor","track","data","len","position","length","duration","props","observerData","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","state","refMap","createRef","refTrack","componentDidMount","get","then","res","land","objects","countries","features","generateMap","catch","e","console","log","projection","scale","translate","precision","canvas","current","attr","canvas2","context","node","getContext","graticule","path","forEach","ele","fillStyle","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","componentDidUpdate","prevProps","prevState","snapshot","setData","latitude","longitude","elevation","endTime","urls","satData","sat","satid","url","all","spread","args","item","err","message","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\n\nimport {\n    WORLD_MAP_URL,\n    SATELLITE_POSITION_URL,\n    SAT_API_KEY\n} from \"../constants\";\n\n\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor(){\n        super();\n        this.state = {\n            map: null\n        }\n        this.map = null;\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fecth world map data ', e))\n    }\n\n    generateMap(land) {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1)\n\n        // console.log(projection)\n        // map\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n\n        // satellite track\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n\n\n        let context = canvas.node().getContext(\"2d\");\n        let context2 = canvas2.node().getContext(\"2d\");\n\n        const graticule = geoGraticule();\n        let path = geoPath().projection(projection).context(context);\n\n        land.forEach( ele => {\n            // country\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            // latitude and longitude (graticule)\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            // border of the map top and bottom\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n\n        })\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context,\n        }\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.setData !== this.props.setData) {\n            const {latitude, longitude, elevation, duration} = this.props.observerData;\n            const endTime = duration * 60; // speed\n\n            // generate all satellite urls\n            const urls = this.props.satData.map( sat => {\n                const { satid } = sat;\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n                return axios.get(url);\n            });\n\n            axios\n                .all(urls)\n                //  promise链式调用\n                // es 6.0 it can use async and await.\n                .then( axios.spread((...args) => {\n                    console.log(args);\n                    return args.map( item => item.data)\n                }))\n                .then( res => {\n                    console.log(res)\n                })\n                .catch( err => {\n                    console.log('err', err.message)\n                })\n\n        }\n\n    }\n\n    track = data => {\n        // get amount of positions of selected satellite\n        const len = data[0].position.length;\n        const { duration } = this.props.observerData;\n        const { context2 } = this.map;\n\n        // record current time\n        let now = new Date();\n        let i = 0;\n\n        // every 1000ms, draw a dot\n        let timer = setInterval(() => {\n            // record current draw time\n            let ct = new Date();\n\n            let timePassed = i === 0 ? 0: ct - now;\n            let time = new Date(now.getTime() + 60 * timePassed);\n\n            context2.clearRect(0, 0, width, height);\n            context2.font = \"bold 14px san-serif\";\n            \n\n        }, 1000);\n    }\n\n    render() {\n        return (\n            <div className = \"map-box\">\n                <canvas className = \"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}